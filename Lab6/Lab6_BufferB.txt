// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Assigment by: Jake Seide and Joseph Tecce
// Using Shadertoy Copywrite User Agreement

//  -> Buffer B (Scene)


// Getting Luminacity color for each pixel
// Referening CookBook By: David Wolff
float Luma(in vec3 color)
{
    return 0.2126 * color.r + 
           0.7152 * color.g + 
           0.0722 * color.b;
}

// Brightening and darkening pixels based on luminocity
// Referening CookBook By: David Wolff
vec4 TonePass(in sCoord fragCoord)
{
    // Getting texture coord
    sCoord uv = fragCoord / iChannelResolution[0].xy;
    
    // Gets the Texture
    vec4 val = texture(iChannel0, uv);
    
    // Getting Contraits for Tone Effect
    return val * clamp(Luma(val.rgb) - lumThresh, 0.0, 1.0) *
        		      (1.0 / (1.0 - lumThresh)); 
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // Calling TonePass Funciton
    fragColor = TonePass(fragCoord);
}
