#version 300 es

//MAIN DUTY: READ ATTRIBUTES
//e.g. 3D pos
//e.g. uv: texture coord
//e.g. surface normal

//Declaring attribute
layout (location = 0) in vec4 aPos; //obj space
layout (location = 1) in vec3 aNormal; //obj space
layout (location = 2) in vec2 aTexCoord; //texture space

//Transformation Uniforms
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//VARYING(vs)
out vec4 vColor;

//PER-FRAGMENT: individual components
out vec4 vNormal;
out vec2 vTexCoord;

// Light stuct
struct lights
{
	vec4 lightPos;
	vec4 diffuseColor;
	vec4 specColor;
};

// Inializing the lights with desired location ands colors
lights LightInit(lights initLight, vec4 lightPos, 
						vec4 diffuseColor, vec4 specColor)
{
	initLight.lightPos = lightPos;
	initLight.diffuseColor = diffuseColor;
	initLight.specColor = specColor;

	return initLight;
}

// Reference Link: https://www.mathematik.uni-marburg.de/~thormae/lectures/graphics1/code/WebGLShaderLightMat/ShaderLightMat.html
vec4 PhongReflection_Cam(lights currentLight)
{
	//Final Norm Pipeline
	//Inverse transpose matrix for normalizing normals(fixes scaling issue)
	mat4 modelViewMat = uViewMat * uModelMat;
	mat3 normMatrix = inverse(transpose(mat3(modelViewMat)));
	vec3 norm_cam = normMatrix * vec3(aNormal);

	// Gets camera in view space
	vec4 pos_camera = uModelMat * aPos;											
	
	// Getting Light direction, reflection direciottion off of sphere
	// And getting normal view direciton off of the camera position
	vec4 lightDir = normalize(currentLight.lightPos - pos_camera);
	vec4 reflectDir = reflect(-lightDir, vec4(norm_cam, 1.0));
	vec4 viewDir = normalize(-pos_camera);
						   
	// Getting Lambert diffusion
	float lambertian = max(((lightDir.x * vec4(norm_cam, 1.0).x) +
							(lightDir.y * vec4(norm_cam, 1.0).y) +
							(lightDir.z * vec4(norm_cam, 1.0).z) +
							(lightDir.w * vec4(norm_cam, 1.0).w)), 0.0);
	float specular = 0.0;
	
	if(lambertian > 0.0)
	{
		// Getting the specular angles off of the sphere
		float specAngle = max(((reflectDir.x * viewDir.x) +
							   (reflectDir.y * viewDir.y) +
							   (reflectDir.z * viewDir.z) +
							   (reflectDir.w * viewDir.w)), 0.0);
							   
		// Multipling angle 4 times instead of power of 4
		specular = specAngle * specAngle * specAngle * specAngle; //pow(specAngle, 4.0);
	}
	
	// returning final Phong relfection
	return vec4(lambertian * currentLight.diffuseColor + specular * currentLight.specColor);
}

// Reference Link: https://www.mathematik.uni-marburg.de/~thormae/lectures/graphics1/code/WebGLShaderLightMat/ShaderLightMat.html
vec4 PhongReflection_Object(lights currentLight)
{
	//Final Norm Pipeline
	//Inverse transpose matrix for normalizing normals(fixes scaling issue)
	mat4 modelViewMat = uViewMat * uModelMat;
	mat3 normMatrix = inverse(transpose(mat3(modelViewMat)));
	vec3 norm_cam = normMatrix * vec3(aNormal); //norm_cam seems to be 'normal' 
												//aPos seems to be 'inputPosition'
												//aNormal seems to be 'inputNormal' 

	// Gets camera in view space
	vec4 pos_camera = uModelMat * aPos;											
	
		// Getting Light direction, reflection direciottion off of sphere
	// And getting normal view direciton off of the camera position 
    vec4 lightDir = normalize(currentLight.lightPos - aPos);
    vec4 reflectDir = reflect(lightDir, normalize(aPos)); 
    vec4 viewDir = normalize(aPos);
    
    // Getting Lambert diffusion
	float lambertian = max(((lightDir.x * viewDir.x) +
							   (lightDir.y * viewDir.y) +
							   (lightDir.z * viewDir.z) +
							   (lightDir.w * viewDir.w)), 0.0);
	float specular = 0.0;
	
	if(lambertian > 0.0)
	{
		// Getting the specular angles off of the sphere
		float specAngle = max(((reflectDir.x * viewDir.x) +
							   (reflectDir.y * viewDir.y) +
							   (reflectDir.z * viewDir.z) +
							   (reflectDir.w * viewDir.w)), 0.0);
							   
		// Multipling angle 4 times instead of power of 4
		specular = specAngle * specAngle * specAngle * specAngle; //pow(specAngle, 4.0);
	}
	
	// returning final Phong relfection
	return vec4(lambertian * currentLight.diffuseColor + specular * currentLight.specColor);
}

void main()
{	
	//to get gl_pos into Clip Space
	gl_Position = uViewProjMat * uModelMat * aPos;

	lights light1;
	lights light2;
	lights light3;

	light1 = LightInit(light1, vec4(2.0, 1.0, 1.0, 1.0), vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0));
	light2 = LightInit(light2, vec4(-2.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 0.5), vec4(1.0, 1.0, 1.0, 1.0));
	light3 = LightInit(light3, vec4(0.0, -5.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.5), vec4(1.0, 1.0, 1.0, 1.0));

	// Phong Relfection For View-Space
	//vColor = PhongReflection_Cam(light1) +
	//		 PhongReflection_Cam(light2) +
	//		 PhongReflection_Cam(light3);
			 
	// Phong Relfection For Object-Space
	vColor = PhongReflection_Object(light1) +
			 PhongReflection_Object(light2) +
			 PhongReflection_Object(light3);
}