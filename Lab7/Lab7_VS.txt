#version 300 es

//MAIN DUTY: READ ATTRIBUTES
//e.g. 3D pos
//e.g. uv: texture coord
//e.g. surface normal

//Declaring attribute
layout (location = 0) in vec4 aPos; //obj space
layout (location = 1) in vec3 aNormal; //obj space
layout (location = 2) in vec2 aTexCoord; //texture space

//Transformation Uniforms
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//VARYING(vs)
out vec4 vColor;

//PER-FRAGMENT: individual components
out vec4 vNormal;
out vec2 vTexCoord;

//Lighting info(Change to struct)
const vec4 lightPos = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 diffuseColor = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 specColor = vec4(1.0, 1.0, 1.0, 1.0);

struct lights
{
	vec4 lightPos;
	vec4 diffuseColor;
	vec4 specColor;
};


lights LightInit(lights initLight, vec4 lightPos, 
						vec4 diffuseColor, vec4 specColor)
{
	initLight.lightPos = lightPos;
	initLight.diffuseColor = diffuseColor;
	initLight.specColor = specColor;

	return initLight;
}

vec4 PhongReflection_Cam(lights currentLight)
{
	//Final Norm Pipeline
	//Inverse transpose matrix for normalizing normals(fixes scaling issue)
	mat4 modelViewMat = uViewMat * uModelMat;
	mat3 normMatrix = inverse(transpose(mat3(modelViewMat)));
	vec3 norm_cam = normMatrix * vec3(aNormal); //norm_cam seems to be 'normal' 
												//aPos seems to be 'inputPosition'
												//aNormal seems to be 'inputNormal' 

	//this is the vert4 equivelent?
	vec4 pos_camera = uModelMat * aPos;											
	
	//Lighting stuff in view space maybe?? 
	vec4 lightDir = normalize(currentLight.lightPos - pos_camera);
	vec4 reflectDir = reflect(-lightDir, vec4(norm_cam, 1.0));
	vec4 viewDir = normalize(-pos_camera);
	
	float lambertian = max(dot(lightDir, vec4(norm_cam, 1.0)), 0.0);
	float specular = 0.0;
	
	if(lambertian > 0.0)
	{
		float specAngle = max(dot(reflectDir, viewDir), 0.0);
		specular = pow(specAngle, 4.0);
	}
	
	return vec4(lambertian * currentLight.diffuseColor + specular * currentLight.specColor);
}

vec4 PhongReflection_Object(lights currentLight)
{
	//Final Norm Pipeline
	//Inverse transpose matrix for normalizing normals(fixes scaling issue)
	mat4 modelViewMat = uViewMat * uModelMat;
	mat3 normMatrix = inverse(transpose(mat3(modelViewMat)));
	vec3 norm_cam = normMatrix * vec3(aNormal); //norm_cam seems to be 'normal' 
												//aPos seems to be 'inputPosition'
												//aNormal seems to be 'inputNormal' 

	//this is the vert4 equivelent?
	vec4 pos_camera = uModelMat * aPos;											
	
	//Lighting stuff in view obj maybe?? 
    vec4 lightDir = normalize(currentLight.lightPos - aPos);
    vec4 reflectDir = reflect(lightDir, normalize(aPos)); 
    vec4 viewDir = normalize(aPos);
    
    float lambertian = max(dot(lightDir, viewDir), 0.0);
	float specular = 0.0;
	
	if(lambertian > 0.0)
	{
		float specAngle = max(dot(reflectDir, viewDir), 0.0);
		specular = pow(specAngle, 4.0);
	}
	
	return vec4(lambertian * currentLight.diffuseColor + specular * currentLight.specColor);
}

void main()
{	
	//to get gl_pos into Clip Space
	gl_Position = uViewProjMat * uModelMat * aPos;

	lights light1;
	lights light2;
	lights light3;

	light1 = LightInit(light1, vec4(2.0, 1.0, 1.0, 1.0), vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0));
	light2 = LightInit(light2, vec4(-2.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 0.5), vec4(1.0, 1.0, 1.0, 1.0));
	light3 = LightInit(light3, vec4(0.0, -5.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.5), vec4(1.0, 1.0, 1.0, 1.0));

	// Phong Relfection For View-Space
	//vColor = PhongReflection_Cam(light1) +
	//		 PhongReflection_Cam(light2) +
	//		 PhongReflection_Cam(light3);
			 
	// Phong Relfection For Object-Space
	vColor = PhongReflection_Object(light1) +
			 PhongReflection_Object(light2) +
			 PhongReflection_Object(light3);
			 
	//Clip space stuff I think
	//vec4 pos_camera = modelViewMat * aPos;
	//vec4 pos_clip = uProjMat * pos_camera;
	//gl_Position = pos_clip;
	
	
	//OPTINAL: write varyings 
	//vColor = vec4(1.0, 0.5, 0.0,1.0);
	//vColor = aPos;
	
	//DEBUGING:
	//outputing normal as color
	//PER-VERTEX output
	//vColor = vec4(aNormal, 1.0);

}