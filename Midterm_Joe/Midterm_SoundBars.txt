#define bands 20.0
#define segs 20.0

/*
#define time iTime

float noise3D(vec3 p)
{
	return fract(sin(dot(p ,vec3(12.9898,78.233,12.7378))) * 43758.5453)*2.0-1.0;
}

vec3 mixc(vec3 col1, vec3 col2, float v)
{
    v = clamp(v,0.0,1.0);
    return col1+v*(col2-col1);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy;
    uv.y = uv.y - 0.1;
    vec2 p = uv*2.0-1.0;
    p.x*=iResolution.x/iResolution.y;
    p.y+=0.5;
    
    vec3 col = vec3(0.0);
    vec3 ref = vec3(0.0);
   
    float nBands = 64.0;
    float i = floor(uv.x*nBands);
    float f = fract(uv.x*nBands);
    float band = i/nBands;
    band *= band*band;
    band = band*0.995;
    band += 0.005;
    float s = texture( iChannel0, vec2(band,0.25) ).x;
    
    /* Gradient colors and amount here */
	/*    
	const int nColors = 4;
    vec3 colors[nColors];  
    colors[0] = vec3(0.0,0.0,1.0);
    colors[1] = vec3(0.0,1.0,1.0);
    colors[2] = vec3(1.0,1.0,0.0);
    colors[3] = vec3(1.0,0.0,0.0);
    
    vec3 gradCol = colors[0];
    float n = float(nColors)-1.0;
    for(int i = 1; i < nColors; i++)
    {
		gradCol = mixc(gradCol,colors[i],(s-float(i-1)/n)*n);
    }
      
    col += vec3(1.0-smoothstep(0.0,0.01,p.y-s*1.5));
    col *= gradCol;

    ref += vec3(1.0-smoothstep(0.0,-0.01,p.y+s*1.5));
    ref*= gradCol*smoothstep(-1.0,0.0,p.y);
    
    col = mix(ref,col,smoothstep(-0.01,0.01,p.y));

    col *= smoothstep(0.125,0.375,f);
    col *= smoothstep(0.875,0.625,f);

    col = clamp(col, 0.0, 1.0);

    float dither = noise3D(vec3(p,time))*2.0/256.0;
    col += dither;
    
	fragColor = vec4(col,1.0);
}
*/

vec3 SoundBarCreation(in vec2 uv) //in float uvX, in float uvY)
{
    vec2 pos;
        
    //uvY = uvY - 0.5;
    
    // Geting segs and bands cords???
    pos.x = floor(uv.x * bands) / bands;
    pos.y = floor(uv.y * segs) / segs;
    
    float fft = texture(iChannel0, vec2(pos.x, 0.0)).x;
    //fft = fft * -1.0;
    //float fft2 = texture(iChannel0, vec2(p.x, 0.0)).x * -1.0 ;
    //texture(iChannel0)
    
    // clamp colors
	vec3 color = mix(vec3(0.5, 0.7, 0.0), vec3(0.5, 0.0, 1.0), abs(uv.y)); //* sqrt(uv.y); //mix(vec3(0.1, 0.1, 0.0), vec3(0.1, 0.1, 0.0), sqrt(uv.y));
    //vec3 color2 = mix(vec3(0.0, 2.0, 0.0), vec3(2.0, 0.0, 2.0), sqrt(-uv.y));
    
    // mask for bar graph
	//float mask2 = (p.y < fft2) ? 1.0 : 0.0;
    //float mask3 = ((p.y < fft) ? 0.5 : 0.0) * -1.0 + 0.5;
    float mask = ((pos.y < fft) ? 1.0 : -2.0);// + 0.5;
    
    //float mask = (1.0 - smoothstep(0.0, 0.01, pos.y - fft * 1.5));
    //float mask = pos.y + fft;
    //float ultamateMask = mask + mask3;
    //float mask2 = (p.y > 
    
    /*
    vec3 color;
    color += vec3(1.0 - smoothstep(0.0, 0.01, pos.y - fft * 1.5));
    color *= grandColor;
    
    vec3 ref;
    ref += vec3(1.0 - smoothstep(0.0, 0.01, pos.y - fft * 1.5));
    ref *= grandColor * color * smoothstep(0.0, 0.5, -pos.y); 
    
    color = mix(ref, color, smoothstep( 0.01, 0.01, pos.y));
    
    color *= smoothstep(0.125,0.375,f);
    color *= smoothstep(0.875,0.625,f);

    color = clamp(color, 1.0, 1.0);
    */                          
    
	// led shape
	vec2 d = fract((uv - pos) * vec2(bands, segs));
	float led = smoothstep(1.0, 0.3, abs(d.x)) *
		        smoothstep(1.0, 0.3, abs(d.y));
	vec3 ledColor = led * color * mask;//led * color * mask;
    
    return ledColor;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;   
   	uv.y = uv.y - 0.5;
    
    
    /*
    vec2 pos;
    
    uv.y = uv.y - 0.5;
    
    // Geting segs and bands cords???
    pos.x = floor(uv.x * bands) / bands;
    pos.y = floor(-uv.y * segs) / segs;
    
    float fft = texture(iChannel0, vec2(pos.x, 0.0)).x;
    //fft = fft * -1.0;
    //float fft2 = texture(iChannel0, vec2(p.x, 0.0)).x * -1.0 ;
    //texture(iChannel0)
    
    // clamp colors
	vec3 color = mix(vec3(0.0, 2.0, 0.0), vec3(2.0, 0.0, 2.0), sqrt(-uv.y));
    
    // mask for bar graph
	//float mask2 = (p.y < fft2) ? 1.0 : 0.0;
    //float mask3 = ((p.y < fft) ? 0.5 : 0.0) * -1.0 + 0.5;
    float mask = ((pos.y < fft) ? 0.7 : 0.0);// + 0.5;
    //float ultamateMask = mask + mask3;
    //float mask2 = (p.y > 
	
	// led shape
	vec2 d = fract(((uv.x + uv.y) - pos) * vec2(bands, segs));
	float led = smoothstep(1.0, 0.3, abs(d.x)) *
		        smoothstep(1.0, 0.3, abs(d.y));
	vec3 ledColor = led * color * mask;
    */

    vec3 soundBarUp = SoundBarCreation(uv);
    uv.y = uv.y * -1.0;
    vec3 soundBarDown = SoundBarCreation(uv);
    
    fragColor = vec4(soundBarUp + soundBarDown, 1.0);
    //fragColor = vec4(soundBarDown, 1.0);
    
    
    // Attempt 2
    //float barID = floor((length(uv) - barStart) / (barEnd - barStart) * numOfBars);
    
    //float d;
    //if(barID >= 0.0 && barID < numOfBars)
    //{
    //    float barWidth = (barEnd - barStart) / numOfBars;
    //    float start = barStart + barWidth * (barID + 0.25);
    //    float barAngle = texture(iChannel0, vec2(1.0 - barID / numOfBars, 0.25)).x * .25; // Important
        
    //    d = min(((start + barWidth / 2.0) + start) / 2.0, ((start + barWidth / 2.0) - start) / 2.0);
    //}
    
    // Attempt 1
    //float soundData = getSoundData(floor(uv.x * numOfBars));
    
    // In charge of color of bars and background color
    //vec3 color = uv.y < soundData - barThickness ? vec3(0, 0.3 + 0.7 * soundData, 0.3)
    //    		 : uv.y < soundData ? boarderColor : vec3 (0);

    // Attempt 2
    //float w = min(fwidth(d), 0.01);
    //fragColor = vec4(vec3(smoothstep(-w, w, d)), 1.0);
    
    // Output to screen
    //fragColor = vec4(color, 1.0); // Attempt 1
    
    //fragColor = vec4(waveColor, 1.0);
}