void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 topUV = fragCoord/iResolution.xy;

    //uv.x -= 0.5;
    //uv.y -= 0.5;
    
    // Attempt 3
    //float wave = texture(iChannel0, vec2(uv.x, 1.0)).x;
	//vec3 waveColor = vec3(0.001, 0.01, 0.04) / abs(wave - uv.y);//abs(wave.xyz - uv.y);
    
    
    // Setting segs and bands
    float bands = 20.0;
    float segs = 20.0;
    vec2 p;
    
    topUV.y = (topUV.y - 0.5);
    
    // Geting segs and bands cords???
    p.x = floor(topUV.x * bands) / bands;
    p.y = floor(-topUV.y * segs) / segs;
    
    float fft = texture(iChannel0, vec2(p.x, 0.0)).x;
    //fft = fft * -1.0;
    //float fft2 = texture(iChannel0, vec2(p.x, 0.0)).x * -1.0 ;
    //texture(iChannel0)
    
    // clamp colors
	vec3 color = mix(vec3(0.0, 2.0, 0.0), vec3(2.0, 0.0, 2.0), sqrt(-topUV.y));
    
    // mask for bar graph
	//float mask2 = (p.y < fft2) ? 1.0 : 0.0;
    //float mask3 = ((p.y < fft) ? 0.5 : 0.0) * -1.0 + 0.5;
    float mask = ((p.y < fft) ? 0.5 : 0.0);// + 0.5;
    //float ultamateMask = mask + mask3;
    //float mask2 = (p.y > 
	
	// led shape
	vec2 d = fract((-topUV - p) * vec2(bands, segs));
	float led = smoothstep(1.0, 0.3, abs(d.x)) *
		        smoothstep(1.0, 0.3, abs(d.y));
	vec3 ledColor = led * color * mask;
    
    //vec2 d2 = fract((uv - p) * vec2(bands, segs));
	//float led2 = smoothstep(1.0, 0.3, abs(d.x)) *
	//	        smoothstep(1.0, 0.3, abs(d.y));
	//vec3 ledColor2 = led2 * color * mask2;
    
    fragColor = vec4(ledColor, 1.0);
    
    
    // Attempt 2
    //float barID = floor((length(uv) - barStart) / (barEnd - barStart) * numOfBars);
    
    //float d;
    //if(barID >= 0.0 && barID < numOfBars)
    //{
    //    float barWidth = (barEnd - barStart) / numOfBars;
    //    float start = barStart + barWidth * (barID + 0.25);
    //    float barAngle = texture(iChannel0, vec2(1.0 - barID / numOfBars, 0.25)).x * .25; // Important
        
    //    d = min(((start + barWidth / 2.0) + start) / 2.0, ((start + barWidth / 2.0) - start) / 2.0);
    //}
    
    // Attempt 1
    //float soundData = getSoundData(floor(uv.x * numOfBars));
    
    // In charge of color of bars and background color
    //vec3 color = uv.y < soundData - barThickness ? vec3(0, 0.3 + 0.7 * soundData, 0.3)
    //    		 : uv.y < soundData ? boarderColor : vec3 (0);

    // Attempt 2
    //float w = min(fwidth(d), 0.01);
    //fragColor = vec4(vec3(smoothstep(-w, w, d)), 1.0);
    
    // Output to screen
    //fragColor = vec4(color, 1.0); // Attempt 1
    
    //fragColor = vec4(waveColor, 1.0);
}