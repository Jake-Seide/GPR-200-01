// NOT ORIGINAL WORK!!! IDEAS FROM GIT-HUB BY: Matt Deslauriers
// LINK: https://github.com/mattdesl/lwjgl-basics/wiki/ShaderLesson6#lambertian-illumination-model
// ALSO GOT SOME OPTIMAZATION IDEAS FROM SHADERTOY USER: Hexus
// LINK: https://www.shadertoy.com/view/MsyXz3
vec4 LambertShading(in vec2 loc, in vec2 uv, in float flip)//, in float dummy)
{
    // Light Intensity
    float intensity = 1.0;
    // This is a "uniform" that was just manually made to help with the position of the light
    vec3 falloff = vec3(0.1, 3.0, 10.0);
    
    // Calculate the lights position
    // Also animates light to move from one side the other of the screen
    //vec3 lightDir = vec3(sin(iTime * 0.5), sin(iTime * 0.5), 0.05);
    vec3 lightPos = vec3(sin(iTime / 0.5), sin(iTime * 0.5), 0.05);
    lightPos.xy = lightPos.xy * flip + 0.5;
    
    // Gets the texture we are diffusing
    vec4 diffuseTex = texture(iChannel0, loc);
    
    // Light from texture coords not uv coord
    vec3 delta  = vec3(lightPos.xy - uv.xy, lightPos.z);
    
    // Fixed Light radius
    delta.xy /= 100.0 / iResolution.xy;
    
    // calculating distance from texture to the light
    float d = length(delta);
    
    // Calculates the distance between light, the intesity of light, and the falloff
    //float IL = 1.0 / (1.0 + d / pointLight.lIntensity + (d * d) / 
    //                  								(pointLight.lIntensity * pointLight.lIntensity));
    float attenuation = intensity / (falloff.x + (falloff.y * d) + (falloff.z * d * d));
    
    // Combining Diffusion and and attenuation
    vec3 light = (diffuseTex.rgb + mix(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), abs(uv.y))) * attenuation;
    
    // Correcting Gamma
    light = sqrt(light);

    // Lambert Reflectance
    // Multiplying the actual texture RGB to the persedual light
    vec4 shading = vec4(diffuseTex.rgb * light, 1.0);
    
    return shading;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
 
    vec2 px = fragCoord;
    vec2 res = iChannelResolution[0].xy;
    float ratio = res.y * iResolution.y;
    vec2 loc = px / res; // relative to texture (strech be gone!)
    
    fragColor += LambertShading(loc, uv, 0.3) + LambertShading(loc, uv, -0.3); //LambertShading(-loc, -uv);
    //uv.x = uv.x * -1.0;
    //fragColor += LambertShading(loc, uv);
}