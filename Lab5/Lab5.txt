// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}

//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

// NOT ORIGINAL WORK!!! IDEAS FROM GIT-HUB BY: Matt Deslauriers
// LINK: https://github.com/mattdesl/lwjgl-basics/wiki/ShaderLesson6#lambertian-illumination-model
// ALSO GOT SOME OPTIMAZATION IDEAS FROM SHADERTOY USER: Hexus
// LINK: https://www.shadertoy.com/view/MsyXz3
vec4 LambertShading(in vec2 loc, in vec2 uv)
{
    // Light Intensity
    float intensity = 1.0;
    // This is a "uniform" that was just manually made to help with the position of the light
    vec3 falloff = vec3(0.1, 3.0, 10.0);
    
    // Calculate the lights position
    // Also animates light to move from one side the other of the screen
    //vec3 lightDir = vec3(sin(iTime * 0.5), sin(iTime * 0.5), 0.05);
    vec3 lightPos = vec3(sin(iTime * 0.5), sin(iTime * 0.5), 0.05);
    lightPos.xy = lightPos.xy * 0.3 + 0.5;
    
    // Gets the texture we are diffusing
    vec4 diffuseTex = texture(iChannel0, loc);
    
    // Light from texture coords not uv coord
    vec3 delta  = vec3(lightPos.xy - uv.xy, lightPos.z);
    
    // Fixed Light radius
    //delta.x /= 256.0 / iResolution.x;
    //delta.y /= 256.0 / iResolution.y;
    delta.xy /= 100.0 / iResolution.xy;
    
    // calculating distance from texture to the light
    float d = length(delta);
    
    // Calculates the distance between light, the intesity of light, and the falloff
    //float IL = 1.0 / (1.0 + d / pointLight.lIntensity + (d * d) / 
    //                  								(pointLight.lIntensity * pointLight.lIntensity));
    // 
    float attenuation = intensity / (falloff.x + (falloff.y * d) + (falloff.z * d * d));
    
    // Combining Diffusion and and attenuation
    vec3 light = diffuseTex.rgb * attenuation;
    
    // Correcting Gamma
    light = pow(light, vec3(1.0 / 2.2));

    // Lambert Reflectance
    // Multiplying the actual texture RGB to the persedual light
    vec4 shading = vec4(diffuseTex.rgb * light, 1.0);
    
    return shading;
}


// Idea for how to make the wave was gotton from Stack overflow
// Link: https://stackoverflow.com/questions/36174431/how-to-make-a-wave-warp-effect-in-shader
sCoord WaveDistortion(in sCoord loc)
{
    
    loc.x += sin(loc.y * 30.0 + iTime) * 0.012;
    loc.y += sin(loc.x * 30.0 + iTime) * 0.012;
    
    return loc;
}

vec4 CrossFade(in vec2 loc)
{
    // Cross-Fade
    return vec4(mix(texture(iChannel0, loc), texture(iChannel1, loc), abs(sin(iTime / 2.0))));
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{    
    // texture (full-screen)
    //sampler2D tex = iChannel0;
    //sCoord loc = vp.uv; // relative to display (makes it stretched)
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res; // relative to texture (strech be gone!)
    
    //sCoord loc1 = 1.0 * (px / res); // *Zoom* relative to texture (strech be gone!)
    //loc = ratio * loc1; // Proper Zoom
    //loc = ratio * (loc1 + 0.25); // zoom + shift, have to finnic around with it
    //this is used for black hole, just ad deferamation influence in the center point
    //loc = ratio * loc + 0.25 * iTime; // zoom + shift + constantly moving across screen,
    // Documentation on texture here: https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/texture.xhtml
    // First parameter: texture itself
    // Second Paramater, coords themselves
    //return texture(iChannel0, loc); // full RGBA
    //return texture(iChannel0, loc).rrrr; // grayscale

    vec2 uv = vp.pixelCoord.xy / iResolution.xy;
    
    // Cross-Fade Here
    //return CrossFade(loc);
    
    // Distrotion Effect Here
    //uv = WaveDistortion(loc);
    //return texture(iChannel0, uv);
    
    // Shading & Textures Effect Here
    return LambertShading(loc, uv);
    
    
    // All needed for lgithing is a 3d point in space for surface, and a normal
    // test surface positon and normal
    //return vp.viewportPoint;
    //return vec4(0.0, 0.0, 1.0, 1.0); // Test z-axis 
    //return vec4(normalize(vec3(vp.viewportPoint.xy, 1.0)), 1.0);
    
    // Cube map
    // sampler type: 'samplerCube'
    vec3 cubeLoc = ray.direction.xyz;
    // 3D rotation matrix
    // cubeLoc = rot * cubeLoc;
    //return vec4(cubeLoc, 1.0);
    //return texture(iChannel2, cubeLoc);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
