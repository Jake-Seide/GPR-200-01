/*Sources: 
	https://raytracing.github.io/books/RayTracingInOneWeekend.html#addingasphere
	https://thebookofshaders.com/glossary/?search=dot
	https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf
*/

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}


/**********Math Stuff***************/
float length_squared(in vec4 v)
{
    return v.r*v.r + v.g*v.g + v.b*v.b + v.a*v.a;   
}

vec4 unit_vector(in vec4 v)
{
    return v/length(v);  //try to get rid og this division(use reciprical if possible)
}

vec4 ray_at(in vec4 rayDirection, in vec4 rayOrigin, in float t)
{
 	return rayOrigin + (rayDirection.x + t, rayDirection.y + t, rayDirection.z + t, rayDirection.a);
}

float get_rand()
{
 	//create a float rng for anitaliasing
    return 0.0;
}
/***********************************/


/**********Data Structures**********/
struct hit_record{
 vec4 p;	  //point or ray
 vec4 normal; //normal map
 float t;     //ray parameters
    
 bool front_face;   
};

struct sphere{
	vec4 center;
    float radius;
};

/***********************************/

void set_face_normal(in hit_record rec, in vec4 rayDirection, in vec4 rayOrigin, in vec4 outward_normal)
{
    rec.front_face = dot(rayDirection, outward_normal) < 0.0;
    rec.normal = rec.front_face ? outward_normal : -outward_normal;
}


//hit_sphere: checks whether the ray is hitting inside or outside the sphere and return the normal mask
//    sphere: 		a struct with the default sphere info
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
//    t_min:
//    t_max:        
//    hit_record:   a struct to record the hittable pixel
float hit_sphere(in sphere s, in vec4 rayDirection, in vec4 rayOrigin, /*float t_min, float t_max,*/ hit_record rec) 
{   
 	//sphere logic
    vec4 oc = rayOrigin - s.center;
    float a = length_squared(rayDirection);
    float half_b = dot(oc, rayDirection);
    float c = length_squared(oc) - s.radius*s.radius;
    float discriminant = half_b*half_b - a*c;
    if(discriminant < 0.0){
        return -1.0;
        /*float root = sqrt(discriminant);
        
        float temp = (-half_b - root)/a; 	//get rid of division if possible
        if(temp < t_max && temp > t_min)
        {
        	rec.t = temp;
            rec.p = ray_at(rayDirection, rayOrigin, rec.t);
            vec4 outward_normal = (rec.p - s.center) / s.radius;	//get rid of division if possible
            set_face_normal(rec, rayDirection, rayOrigin, outward_normal);
            return true;
        }
        
        
        float _temp = (-half_b + root)/a; 	//get rid of division if possible
        if(_temp < t_max && _temp > t_min)
        {
        	rec.t = temp;
            rec.p = ray_at(rayDirection, rayOrigin, rec.t);
            vec4 outward_normal = (rec.p - s.center) / s.radius;	//get rid of division if possible
            set_face_normal(rec, rayDirection, rayOrigin, outward_normal);
            return true;
        }*/
    }
    else    
   		return (-half_b - sqrt(discriminant) ) / a;
}


/*bool hittable_list(in hit_list, in hit_record rec, in sphere s, in vec4 rayDirection,  in vec4 rayOrigin, float t_min, float t_max)
{
	hit_record temp_rec;
    bool hit_anything = false;
    float closest_so_far = t_max;
    //float arrayLength = hit_list.length();
    
    //for(int i = 0; i < arrayLength; ++i)
   // {
        //if(hit_sphere(s, rayDirection, rayOrigin, t_min, t_max, rec) > 0.0) 
       // {
			//hit_anything = true;
        	//closest_so_far = temp_rec.t;
        	//rec = temp_rec;
       // }
    //}
    return hit_anything;
    
}*/
   

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin) //maybe add the hit_record struct
{    
    //Hit record struct
    hit_record rec;
    sphere s;
    
    //Make red
    vec4 colorRed = vec4(1,0,0,1);
     
    s.center = vec4(0,0,-1,1);
    s.radius = 0.5;
    
    float t = hit_sphere(s, rayDirection, rayOrigin, /*t_min, t_max,*/ rec); 
    
    //If ray hit sphere area
    if(t > 0.0){
        vec4 n = unit_vector((rayOrigin + t*rayDirection) - (vec4(0,0,-1,1)));
        return 0.5*vec4(n.x + 1.0, n.y + 1.0, n.z + 1.0, n.a);
    }
      
    vec4 unitDirection = unit_vector(rayDirection);
    float _t = 0.5*(unitDirection.y + 1.0);
	return (1.0 - _t) * vec4(1.0) + _t*vec4(0.5, 0.7, 1.0, 1.0);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;	//GLSL is optimized for vec4

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);

    // color
    fragColor = calcColor(rayDirection, rayOrigin);

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
}